<<<<<<< HEAD
import { ThunkAction, ThunkDispatch, thunk } from 'redux-thunk';
=======
import { configureStore } from '@reduxjs/toolkit';
>>>>>>> origin/main

import {
  TypedUseSelectorHook,
  useDispatch as dispatchHook,
  useSelector as selectorHook
} from 'react-redux';
<<<<<<< HEAD
import { configureStore } from '@reduxjs/toolkit';

const store = configureStore({
  reducer: {}
});

export type RootState = any;

type TApplicationActions = any;

export type AppThunk<Return = void> = ThunkAction<
  Return,
  RootState,
  unknown,
  TApplicationActions
>;

export type AppDispatch = ThunkDispatch<RootState, never, TApplicationActions>;

export const useDispatch = () => dispatchHook<AppDispatch>();
=======

const rootReducer = () => {}; // Заменить на импорт настоящего редьюсера

const store = configureStore({
  reducer: rootReducer,
  devTools: process.env.NODE_ENV !== 'production'
});

export type RootState = ReturnType<typeof rootReducer>;

export type AppDispatch = typeof store.dispatch;

export const useDispatch: () => AppDispatch = () => dispatchHook();
>>>>>>> origin/main
export const useSelector: TypedUseSelectorHook<RootState> = selectorHook;

export default store;
